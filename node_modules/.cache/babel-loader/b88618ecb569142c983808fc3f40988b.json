{"ast":null,"code":"var _jsxFileName = \"/home/anna/work/react/tutorial/my-app/src/Users/UsersContainer.js\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../redux/users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../components/common/Preloader/Preloader';\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggleIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, this.props.isFetching ? /*#__PURE__*/React.createElement(Preloader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 30\n      }\n    }) : null, /*#__PURE__*/React.createElement(Users, {\n      totalUsersCount: this.props.totalUsersCount,\n      pageSize: this.props.pageSize,\n      currentPage: this.props.currentPage,\n      onPageChanged: this.onPageChanged,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch)=>{//переадет колбеки, которая презантационная компонента может вызывать\n//     return{\n//         follow: (userId)=>{\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId)=>{\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users)=>{\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage:(pageNumber)=>{\n//             dispatch(setCurrentPageAC(pageNumber));\n//         },\n//         setTotalUsersCount:(totalCount)=>{\n//             dispatch(setUsersTotalCountAC(totalCount));\n//         },\n//         toggleIsFetching:(isFetching)=>{\n//             dispatch(toggleIsFetchingAC(isFetching));\n//         }\n//     }\n// }\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/home/anna/work/react/tutorial/my-app/src/Users/UsersContainer.js"],"names":["React","connect","follow","unfollow","setUsers","setCurrentPage","setTotalUsersCount","toggleIsFetching","axios","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport { follow, unfollow, setUsers, setCurrentPage, setTotalUsersCount, toggleIsFetching } from '../redux/users-reducer';\nimport * as axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../components/common/Preloader/Preloader';\n\n\nclass UsersContainer extends React.Component {\ncomponentDidMount(){\n    this.props.toggleIsFetching(true);\n    axios\n    .get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`)\n    .then((response) => {\n    this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n}\n     onPageChanged = (pageNumber)=> {\n       this.props.setCurrentPage(pageNumber);\n       this.props.toggleIsFetching(true);\n       axios\n    .get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`)\n    .then((response) => {\n        this.props.toggleIsFetching(false);\n\n      this.props.setUsers(response.data.items);\n    });\n     }\n\n  render() {\n    return <> \n    {this.props.isFetching ? <Preloader/> : null}\n    <Users totalUsersCount={this.props.totalUsersCount}\n    pageSize={this.props.pageSize}\n    currentPage={this.props.currentPage}\n    onPageChanged={this.onPageChanged}\n    users={this.props.users}\n    follow={this.props.follow}\n    unfollow={this.props.unfollow}\n    \n\n    />\n    </>\n  }}\n\nlet mapStateToProps = (state) =>{\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalUsersCount:state.usersPage.totalUsersCount,\n        currentPage:state.usersPage.currentPage, \n        isFetching: state.usersPage.isFetching\n    }\n}\n\n// let mapDispatchToProps = (dispatch)=>{//переадет колбеки, которая презантационная компонента может вызывать\n//     return{\n//         follow: (userId)=>{\n//             dispatch(followAC(userId));\n\n//         },\n//         unfollow: (userId)=>{\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers: (users)=>{\n//             dispatch(setUsersAC(users));\n//         },\n//         setCurrentPage:(pageNumber)=>{\n//             dispatch(setCurrentPageAC(pageNumber));\n//         },\n//         setTotalUsersCount:(totalCount)=>{\n//             dispatch(setUsersTotalCountAC(totalCount));\n//         },\n//         toggleIsFetching:(isFetching)=>{\n//             dispatch(toggleIsFetchingAC(isFetching));\n//         }\n\n//     }\n// }\n\nexport default connect(mapStateToProps, {\n    follow,\n    unfollow,\n    setUsers,\n    setCurrentPage,\n    setTotalUsersCount,\n    toggleIsFetching\n    })(UsersContainer);"]},"metadata":{},"sourceType":"module"}